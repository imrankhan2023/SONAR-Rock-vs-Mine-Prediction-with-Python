# -*- coding: utf-8 -*-
"""Rock vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cc9oXoIfmxZ55Wk1tVoUM6A-dljKc9zQ

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn .linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data collection and Data processing"""

#loading the dataset into a panda dataframes
sonar_data = pd.read_csv('/content/Copy of sonar data.csv', header=None)
sonar_data.head()

#Number of rows and columns
sonar_data.shape

sonar_data.describe() #dit gives statistical data

sonar_data[60].value_counts()

"""M --> Represents Mine
R --> Represents Rock
"""

sonar_data.groupby(60).mean()

#seperating the data and labels
X = sonar_data.drop(columns=60, axis=1)
Y = sonar_data[60]

print(X)
print(Y)

"""Training and Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.1, stratify=Y, random_state = 1)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training ---> LinearRegression"""

#Training the logistic regression model with the training data

model = LogisticRegression()

model.fit(X_train, Y_train)

"""Model Evaluation

"""

#Accuracy on training data

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print("Accuracy on training data: ", training_data_accuracy)

#Accuracy on testing data

X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print("Accuracy on testing data: ", test_data_accuracy)

"""Making a predictive system"""

input_data = (0.0124,0.0433,0.0604,0.0449,0.0597,0.0355,0.0531,0.0343,0.1052,0.2120,0.1640,0.1901,0.3026,0.2019,0.0592,0.2390,0.3657,0.3809,0.5929,0.6299,0.5801,0.4574,0.4449,0.3691,0.6446,0.8940,0.8978,0.4980,0.3333,0.2350,0.1553,0.3666,0.4340,0.3082,0.3024,0.4109,0.5501,0.4129,0.5499,0.5018,0.3132,0.2802,0.2351,0.2298,0.1155,0.0724,0.0621,0.0318,0.0450,0.0167,0.0078,0.0083,0.0057,0.0174,0.0188,0.0054,0.0114,0.0196,0.0147,0.0062)

#changing the input data into numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshapping the np array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)
prediction = model.predict(input_data_reshaped)

print(prediction)

if(prediction[0]=='R'):
  print("The object is a Rock")
else:
  print("The object is a Mine")

